@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

@model BusPortal.Web.Models.DTO.AddBookingViewModel

@{
    ViewData["Title"] = "Create Booking";
}

<div class="container mt-5">
    <h2>Create New Booking</h2>
    <form asp-action="Add" method="post">
        <div class="form-group mb-3">
            <label asp-for="StartCity">Start City</label>
            <select asp-for="StartCity"
                    class="form-control"
                    asp-items="ViewBag.StartCities"
                    id="startCitySelect">
                <option value="">Select Start City</option>
            </select>
            <span asp-validation-for="StartCity" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="DestinationCity">Destination City</label>
            <select asp-for="DestinationCity"
                    class="form-control"
                    id="destinationCitySelect">
                <option value="">Select Destination City</option>
            </select>
            <span asp-validation-for="DestinationCity" class="text-danger"></span>
        </div>

        <div class="form-group mt-3">
            <label>Select Your Seat</label>
            @{
                bool IsOccupied(string seat)
                {
                    var occupiedSeatsList = ViewBag.OccupiedSeats as List<string>;
                    return occupiedSeatsList?.Any(occupiedSeat => occupiedSeat.Trim() == seat) ?? false;
                }
            }
            <div class="bus-layout">
                <div class="seats-container">
                    @for (int row = 1; row <= 10; row++)
                    {
                        <div class="seat-row">
                            <div class="seat @(IsOccupied($"{row}A") ? "occupied" : "available")" data-seat="@(row)A">
                                <span>@($"{row}A")</span>
                            </div>
                            <div class="seat @(IsOccupied($"{row}B") ? "occupied" : "available")" data-seat="@(row)B">
                                <span>@($"{row}B")</span>
                            </div>
                            <div class="aisle"></div>
                            <div class="seat @(IsOccupied($"{row}C") ? "occupied" : "available")" data-seat="@(row)C">
                                <span>@($"{row}C")</span>
                            </div>
                            <div class="seat @(IsOccupied($"{row}D") ? "occupied" : "available")" data-seat="@(row)D">
                                <span>@($"{row}D")</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <input type="hidden" id="selectedSeat" name="Seat" required />
        </div>

        <div class="form-group mb-3">
            <label asp-for="Price">Total Price</label>
            <input asp-for="Price" class="form-control" id="priceInput" readonly />
            <span asp-validation-for="Price" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="DepartureTimes">Available Departure Time</label>
            <select asp-for="DepartureTimes"
                    class="form-control"
                    id="DepartureTimes">
                <option value="">Departure Time</option>
            </select>
            <span asp-validation-for="DepartureTimes" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="DateTime">Date</label>
            <input asp-for="DateTime" class="form-control" type="date" />
            <span asp-validation-for="DateTime" class="text-danger"></span>
        </div>

        <button type="button" class="btn btn-primary" id="createBookingBtn">Create Booking</button>
    </form>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script>
        $(document).ready(function () {
            let selectedSeats = [];
            let canSelectSeats = false;
            let basePrice = 0;

            $('#startCitySelect').change(function () {
                const startCity = $(this).val();
                resetFormFields();
                if (startCity) {
                    $.getJSON('@Url.Action("GetDestinationCities", "Bookings")', 
                        { startCity }, 
                        data => populateDropdown('#destinationCitySelect', data, 'Select Destination City')
                    );
                }
            });

            $('#destinationCitySelect').change(function () {
                const startCity = $('#startCitySelect').val();
                const destinationCity = $(this).val();
                if (startCity && destinationCity) {
                    canSelectSeats = true;
                    getDepartureTimes(startCity, destinationCity);
                    getPrice(startCity, destinationCity);
                } else {
                    resetFormFields();
                }
            });

            
            $('.seat').click(function (event) {
                if (!canSelectSeats) {
                    showError('Please select a Start City and Destination City first.');
                    return;
                }
                if ($(this).hasClass('occupied')) return;

                const seatNumber = $(this).data('seat');
                const isSelected = $(this).hasClass('selected');

                if (!isSelected && selectedSeats.length >= 5) {
                    showError('You can select up to 5 seats only.');
                    return;
                }

                $(this).toggleClass('selected');
                updateSelectedSeats(seatNumber, isSelected);
                updateTotalPrice();
            });

           
            $('#createBookingBtn').click(function () {
                const startCity = $('#startCitySelect').val();
                const destinationCity = $('#destinationCitySelect').val();
                const price = $('#priceInput').val();
                const dateTime = $('#DateTime').val();
                const departureTime = $('#DepartureTimes').val();

                if (!dateTime || !departureTime) {
                    showError('Please select a Date and Departure Time.');
                    return;
                }

                if (startCity && destinationCity && price > 0) {
                    window.location.href = `@Url.Action("CreateCheckoutSession", "Home")?startCity=${startCity}&destinationCity=${destinationCity}&price=${price}`;
                } else {
                    showError('Please complete all required fields.');
                }
            });

           
            function getDepartureTimes(startCity, destinationCity) {
                $.getJSON('@Url.Action("GetDepartureTimes", "Bookings")', 
                    { startCity, destinationCity }, 
                    data => populateTimesDropdown(data)
                );
            }

            function getPrice(startCity, destinationCity) {
                $.getJSON('@Url.Action("GetPrice", "Home")', 
                    { startCity, destinationCity }, 
                    data => {
                        basePrice = data;
                        updateTotalPrice();
                    }
                ).fail(() => {
                    basePrice = 0;
                    $('#priceInput').val('');
                });
            }

            function updateSelectedSeats(seatNumber, isSelected) {
                selectedSeats = isSelected 
                    ? selectedSeats.filter(s => s !== seatNumber)
                    : [...selectedSeats, seatNumber];
                $('#selectedSeat').val(selectedSeats.join(','));
            }

            function updateTotalPrice() {
                const totalPrice = basePrice * selectedSeats.length;
                $('#priceInput').val(totalPrice.toFixed(2));
            }

            function populateTimesDropdown(data) {
                const times = typeof data === 'string' ? data.split(',') : data;
                populateDropdown('#DepartureTimes', times, 'Select Departure Time');
            }

            function populateDropdown(selector, items, defaultText) {
                const dropdown = $(selector).empty().append(`<option value="">${defaultText}</option>`);
                items.forEach(item => dropdown.append(`<option value="${item}">${item}</option>`));
            }

            function resetFormFields() {
                canSelectSeats = false;
                selectedSeats = [];
                basePrice = 0;
                $('#selectedSeat').val('');
                $('#priceInput').val('');
                $('#DepartureTimes').empty().append('<option value="">Select Departure Time</option>');
                $('.seat').removeClass('selected');
            }

            function showError(message) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: message
                });
            }
        });
    </script>

    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #e3f2fd;
            margin: 0;
            padding: 0;
        }

        .container {
            background: #ffffff;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
            max-width: 600px;
            margin: 40px auto;
        }

        h2 {
            color: #0d6efd;
            text-align: center;
            margin-bottom: 20px;
        }

        .bus-layout {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .seat-row {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-bottom: 10px;
        }

        .aisle {
            width: 20px;
        }

        .seat {
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: white;
            border: 2px solid #0d6efd;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .seat:hover {
                background: #e9ecef;
            }

            .seat.selected {
                background: #28a745 !important;
                color: white;
            }

            .seat.occupied {
                background: #dc3545 !important;
                color: white;
                cursor: not-allowed;
            }

        .btn {
            position: relative;
            z-index: 10;
            width: 100%;
            padding: 10px;
            font-size: 16px;
        }
        .price-display {
            font-size: 1.2rem;
            font-weight: bold;
            color: #28a745;
        }
        .seat-counter {
            margin-top: 10px;
            font-size: 0.9rem;
            color: #6c757d;
        }
    </style>
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success mt-3">
        @TempData["SuccessMessage"]
    </div>
}